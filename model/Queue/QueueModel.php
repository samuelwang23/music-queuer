<?php
/* Generated by neoan3-cli */

namespace Neoan3\Model\Queue;

use Neoan3\Provider\MySql\Database;
use Neoan3\Provider\Model\Model;
use Neoan3\Provider\MySql\Transform;

/**
 * Class QueueModel
 * @package Neoan3\Model\Queue
 * @method static get(string $id)
 * @method static create(array $modelArray)
 * @method static update(array $modelArray)
 * @method static find(array $conditionArray)
 * @method static delete(string $id, bool $hard = false)
 */

class QueueModel implements Model{

    /**
     * @var Database|null
     */
    private static ?Database $db = null;

    /**
     * @param $method
     * @param $args
     * @return mixed
     */
    public static function __callStatic($method, $args)
    {
        if(!method_exists(self::class, $method)){
            $transform = new Transform('queue', self::$db);
            return $transform->$method(...$args);
        } else {
            return self::$method(...$args);
        }
    }

    /**
     * @param array $providers
     */
    public static function init(array $providers)
    {
        foreach ($providers as $key => $provider){
            if($key === 'db'){
                self::$db = $provider;
            }
        }
    }

    /**
     * @param string $id
     */
    public static function complete(string $id)
    {
        $ids = self::$db->easy("queue.id", [], ["orderBy" => ["queue.position", "ASC"]]);
        $results = [];
        foreach($ids as $id){
            $results[] = self::get($id["id"]);
        }
        return $results;
    }

    /**
     * @params string $id
     * @params array $body
     * @return array 
     */
    public static function newQueueItem(string $id, array $body)
    {
        $body["queue_id"] = hex2bin($body["queue_id"]);
        $body["item_id"] = hex2bin($body["item_id"]);
        return self::$db->smart("queue_item", $body);
    }

}